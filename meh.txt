beginfunction print_stuff [ something as string, meh as any];

	out ["i am print_stuff: ", something, " , ", meh];

	if not host_has ["lol"];

		host_add ["lol", 33];

		out ["optional return wich continues with the execution context"];
		return;
	endif;

endfunction;

beginfunction exiter [ message as string];

	out ["exiting will not return to parent context: ", message];
	exit;

endfunction;

beginfunction main;

	out ["main is starting"];

	let one be 1; 
	let two be 2;

	if host_has ["lol"];
		out ["there is lol"];
		let hv be host_get ["lol"];
		out ["lol is ", hv];
	else;
		out ["there is no lol"];
	endif;

	let hvar be host_get ["var"];
	out ["var is ", hvar];

	if not host_has ["troll"];

		out ["creating troll..."];
		host_add ["troll", "lel"];
		host_delete ["troll"];
		if host_has ["troll"];
			fail ["something failed, troll should have been deleted"];
		endif;

	endif;

	let strparam be host_get ["some_string"];
	call [ "print_stuff", strparam, hvar ];

	let d be 12.2;
	if is_double [d];
		out ["is double"];
	else;
		out [d, " is not double"];
	endif;

	if is_equal [one, two];
		fail ["something is horribly wrong"];
	else;
		out ["sanity reigns"];
	endif;

	#A regular loop...
	let looper be 1;
	loop;

		out ["looper as ", looper];
		if is_equal [looper, 10];

			set one to 33;
			out ["will break"];
			break;
		endif;

		set looper to add [looper, 1];
	endloop;

	out ["now we start the yield loop"];

	#Another yielding loop.
	let yieldcounter be 0;

	#TODO: We should be able to declare them inside the loop...
	#this is a bug.
	let has_done be false;
	let has_exit be false;

	loop;
	
		set has_done to host_has ["done"];
		set has_exit to host_has ["exit"];

		if is_equal [has_done, has_exit, false];

			out ["type 'done' or 'exit' to finish, yielded ", yieldcounter, " times"];
			set yieldcounter to add [yieldcounter, 1];
			yield;

		elseif is_equal [has_done, true];

			break;
		elseif is_equal [has_exit, true];

			call [ "exiter", "thanks for all the fish" ];
		endif;

	endloop;

	out ["bye ", looper, " and ", one, "!"];

	#Totally not needed.
	return;

endfunction;
