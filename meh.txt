beginscript parametrised_script [parama, paramb];

	let same be is_equal [parama, paramb];

endscript;

beginscript unparametrised_script;

	let justice be true;
	let number be 666;
	let there be "light";
	
	let same be is_equal [same, true, true];
	let lesser be is_lesser_than [0, 1, 2];
	let greater be is_greater_than [10, 1, 2];

	out ["string", 12, true, justice, number, there, same, lesser, greater];

	#TODO: I guess it's time for this...
	if is_equal [same, true];
#		out["1, 1 and 2 are the same"];
#	endif;

#	fail ["ok this failed", justice];


# i guess I read the condition and then... what? if mode is like a context, 
# right? I need to create an instruction and a new linear context and then
# i keep reading until endif... but of course, there's else. And there's
# elseif... All these would be different contexts and would need to be added
# to the very same instruction, right? it could be something like 
# branch with N conditions, N contexts and an extra else context.


#	if not is_equal [same, true]
#		out["1, 1 and 2 are NOT the same"]
#	endif

#	yield;
#	break;
#	return;

endscript;
